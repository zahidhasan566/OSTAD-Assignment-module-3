pipeline {
    agent any

    environment {
        PATH = "/usr/bin:/usr/local/bin:${env.PATH}"
        REMOTE_USER = 'ubuntu'
        REMOTE_HOST = '13.239.134.104'
        PROJECT_DIR = '/home/ubuntu/OSTAD-Assignment-module-3'
        NODE_PATH = '/home/ubuntu/.nvm/versions/node/v18.17.1/bin/npm'
        SLACK_CHANNEL = '#cicdnode'
        SLACK_BOT_TOKEN = credentials('slack-token')
    }

    stages {
        stage('Pull Latest Code') {
            steps {
                echo 'Updating code on production server...'
                sshagent(['remote-ssh-key']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} '
                            cd ${PROJECT_DIR} &&
                            git pull origin main
                        '
                    """
                }
            }
        }

stage('Install Dependencies') {
    steps {
        echo 'Running npm install...'
        sshagent(['remote-ssh-key']) {
            sh """
                ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} '
                    cd ${PROJECT_DIR} &&
                    npm install
                '
            """
        }
    }
}
      stage('Run Tests') {
            steps {
                sshagent(['remote-ssh-key']) {
                    sh """
                        # Execute tests on the designated test/prod server
                        ssh -o StrictHostKeyChecking=no ${TEST_USER}@${TEST_HOST} '
                            cd ${TEST_DIR} || { echo "Directory missing!"; exit 1; }

                            # Install dependencies if needed
                            if [ ! -d "node_modules" ]; then
                                npm install
                            fi

                            # Create test-reports directory
                            mkdir -p test-reports

                            # Run tests with JUnit reporter
                            mocha --reporter mocha-junit-reporter \
                                  --reporter-options mochaFile=test-reports/junit.xml
                        '

                        # Copy test results back to Jenkins
                        scp ${TEST_USER}@${TEST_HOST}:${TEST_DIR}/test-reports/junit.xml ./
                    """
                }
                junit 'junit.xml'
            }
        }

        stage('Restart with PM2') {
            steps {
                echo 'Restarting PM2 process...'
                sshagent(['remote-ssh-key']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} '
                            pm2 reload server || pm2 start src/server.js --name server &&
                            pm2 save
                        '
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'Sending Slack success notification...'
             sh """
                curl -X POST https://slack.com/api/chat.postMessage \
                -H "Authorization: Bearer ${SLACK_BOT_TOKEN}" \
                -H "Content-type: application/json; charset=utf-8" \
                --data '{
                  "channel": "#cicdnode",
                  "text": "✅ Deployment succeeded on ${env.JOB_NAME} #${env.BUILD_NUMBER}"
                }'
              """
        }

        failure {
            echo 'Sending Slack failure notification...'
             sh """
                curl -X POST https://slack.com/api/chat.postMessage \
                -H "Authorization: Bearer ${SLACK_BOT_TOKEN}" \
                -H "Content-type: application/json; charset=utf-8" \
                --data '{
                  "channel": "#cicdnode",
                  "text": "❌ Deployment failed on  ${env.JOB_NAME} #${env.BUILD_NUMBER}"
                }'
              """
        }
    }
}