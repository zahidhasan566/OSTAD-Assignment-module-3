pipeline {
    agent any

    environment {
        // Local paths (for Jenkins node)
        PATH = "/usr/bin:/usr/local/bin:${env.PATH}"

        // Remote server config
        REMOTE_USER = 'ubuntu'
        REMOTE_HOST = '13.239.134.104'
        PROJECT_DIR = '/home/ubuntu/OSTAD-Assignment-module-3'

        // Slack config
        SLACK_CHANNEL = '#cicdnode'
        SLACK_BOT_TOKEN = credentials('slack-token')
    }

    stages {
        stage('Checkout Code') {
            steps {
                git url: 'https://github.com/zahidhasan566/OSTAD-Assignment-module-3.git',
                     branch: 'main'
            }
        }

        stage('Run Local Tests') {
            steps {
                sh '''
                    echo "=== Local Environment ==="
                    echo "Node: $(node -v)"
                    echo "npm: $(npm -v)"

                    mkdir -p test-reports
                    npm ci
                    npm test
                '''
                junit 'test-reports/junit.xml'
            }
        }

        stage('Deploy to Production') {
            steps {
                sshagent(['remote-ssh-key']) {
                    sh """
                        echo "=== Deploying to ${REMOTE_HOST} ==="
                        ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} '
                            cd ${PROJECT_DIR} || exit 1
                            git pull origin main
                            npm ci --only=production
                            pm2 reload server || pm2 start src/server.js --name server
                            pm2 save
                        '
                    """
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up workspace..."
            cleanWs()
        }
        success {
            slackSend(
                channel: SLACK_CHANNEL,
                message: "✅ Deployment succeeded - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                color: 'good'
            )
        }
        failure {
            slackSend(
                channel: SLACK_CHANNEL,
                message: "❌ Deployment failed - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                color: 'danger'
            )
        }
    }
}